#!/usr/bin/env python

from openai import OpenAI
from prompt_toolkit import prompt
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.shortcuts import message_dialog
from prompt_toolkit.shortcuts.dialogs import input_dialog
from prompt_toolkit.validation import Validator, ValidationError

client = OpenAI()
kb = KeyBindings()

model_in_use = "gpt-4o-mini"
system_content = "Ask anything."
prompt_message = "Enter your message:"
messages = [
    {"role": "system", "content": system_content},
]


class NumberValidator(Validator):
    def validate(self, document):
        text = document.text

        if text and not text.isdigit():
            i = 0

            # Get index of first non numeric character.
            # We want to move the cursor here.
            for i, c in enumerate(text):
                if not c.isdigit():
                    break

            raise ValidationError(
                message="This input contains non-numeric characters",
                cursor_position=i + 1,  # +1 so we can use backspace
            )


async def get_model(error_text=""):
    # Fetch models (you may want to cache this if it's time-consuming)
    models = client.models.list()
    sorted_models = sorted(models.data, key=lambda model: model.created)

    # Display the models
    model_list = "\n".join(f"{i}. {model}" for i, model in enumerate(sorted_models))
    if error_text:
        error_formatted = f"<ansired>{error_text}</ansired>\n"
    else:
        error_formatted = ""

    # Combine the formatted text
    text = HTML(
        f"{model_list}\n\n{error_formatted}Enter the number of the model you want to use: [<ansigreen>{model_in_use}</ansigreen>]"
    )

    # Show input dialog
    result = await input_dialog(
        title="Select Model", text=text, validator=NumberValidator()
    ).run_async()

    if result is None:
        return model_in_use

    try:
        selected_index = int(result)
        if 0 <= selected_index < len(sorted_models):
            return sorted_models[selected_index].id
        else:
            return await get_model(
                f"Invalid selection. Please enter a number between 0 and {len(sorted_models) - 1}."
            )
    except ValueError:
        return await get_model(
            f"Invalid input. Please enter a number between 0 and {len(sorted_models) - 1}."
        )


async def select_model():
    global model_in_use

    model_in_use = await get_model()
    text = HTML(f"Selected model: <ansigreen>{model_in_use}</ansigreen>")
    await message_dialog(title="Model Selected", text=text).run_async()


@kb.add("f8")
def _(event):
    # You can prevent the character from being added to the input buffer
    # event.app.current_buffer.reset()
    event.app.create_background_task(select_model())


def handle_input():
    while True:
        input_string = prompt(f"{prompt_message}\n", key_bindings=kb, multiline=True)

        # print(input_string)
        messages.append({"role": "user", "content": input_string})
        completion = client.chat.completions.create(
            model=model_in_use, messages=messages
        )

        message = completion.choices[0].message
        print(f"\nResponse:\n{message.content}\n")
        messages.append(message)


if __name__ == "__main__":
    print("Instructions:")
    print("Press F8 to change model")
    print("Press Ctrl-C or Ctrl-D to quit")
    print(f"\n{system_content}\n")

    try:
        handle_input()
    except (KeyboardInterrupt, EOFError):  # Ctrl-C or Ctrl-D is pressed
        print("\nQuitting...")
        exit(0)
