#!/usr/bin/env python

from openai import OpenAI
from prompt_toolkit import PromptSession
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.shortcuts.dialogs import input_dialog
from prompt_toolkit.formatted_text import HTML

client = OpenAI()
kb = KeyBindings()

model_in_use = "gpt-4o-mini"
system_content = "Ask anything."
prompt_message = "Enter your message:"
messages = [
    {"role": "system", "content": system_content},
]


async def select_model(error_text=""):
    global model_in_use

    # Fetch models (you may want to cache this if it's time-consuming)
    models = client.models.list()
    sorted_models = sorted(models.data, key=lambda model: model.created)

    # Display the models
    model_list = "\n".join(f"{i}. {model}" for i, model in enumerate(sorted_models))
    if error_text:
        error_formatted = f"<ansired>{error_text}</ansired>\n"
    else:
        error_formatted = ""

    # Combine the formatted text
    text = HTML(
        f"{model_list}\n\n{error_formatted}Enter the number of the model you want to use: [<ansigreen>{model_in_use}</ansigreen>]"
    )

    # Show input dialog
    result = await input_dialog(title="Select Model", text=text).run_async()

    if result is None:
        print(f"\n\nSelected model: {model_in_use}")
        print(prompt_message)
        return model_in_use

    try:
        selected_index = int(result)
        if 0 <= selected_index < len(sorted_models):
            model_in_use = sorted_models[selected_index].id
            print(f"\n\nSelected model: {model_in_use}")
            print(prompt_message)
            return model_in_use
        else:
            return await select_model(
                f"Invalid selection. Please enter a number between 0 and {len(sorted_models) - 1}."
            )
    except ValueError:
        return await select_model(
            f"Invalid input. Please enter a number between 0 and {len(sorted_models) - 1}."
        )


@kb.add("f8")
def _(event):
    # You can prevent the character from being added to the input buffer
    # event.app.current_buffer.reset()
    event.app.create_background_task(select_model())


def handle_input():
    print(prompt_message)
    input_string = session.prompt()

    # print(input_string)
    messages.append({"role": "user", "content": input_string})
    completion = client.chat.completions.create(model=model_in_use, messages=messages)

    message = completion.choices[0].message
    print(f"\nResponse:\n{message.content}\n")
    messages.append(message)

    handle_input()


if __name__ == "__main__":
    global session

    print("Instructions:")
    print("Press F8 to change model")
    print("Press Ctrl-C or Ctrl-D to quit")
    print(f"\n{system_content}\n")

    try:
        session = PromptSession(key_bindings=kb)
        handle_input()
    except (KeyboardInterrupt, EOFError):  # Ctrl-C or Ctrl-D is pressed
        print("\nQuitting...")
        exit(0)
