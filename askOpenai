#!/usr/bin/env python

from openai import OpenAI
from prompt_toolkit import prompt
from prompt_toolkit.formatted_text import HTML
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.shortcuts import message_dialog
from prompt_toolkit.shortcuts import radiolist_dialog

client = OpenAI()
kb = KeyBindings()

model_in_use = "gpt-4o-mini"
system_content = "Ask anything."
messages = [
    {"role": "system", "content": system_content},
]


async def get_model(error_text=""):
    # Fetch models (you may want to cache this if it's time-consuming)
    models = client.models.list()
    sorted_models = sorted(models.data, key=lambda model: model.created)

    dialog_text = HTML(
        f"Select the model you want to use: [<ansigreen>{model_in_use}</ansigreen>]"
    )
    # [(model.id, str(model))]
    dialog_values = list(map(lambda x: (x.id, str(x)), sorted_models))

    result = await radiolist_dialog(
        title="Select Model",
        text=dialog_text,
        values=dialog_values,
        default=model_in_use,
    ).run_async()

    if result is None:
        return model_in_use

    return result


async def select_model():
    global model_in_use

    model_in_use = await get_model()
    dialog_text = HTML(f"Selected model: <ansigreen>{model_in_use}</ansigreen>")
    await message_dialog(title="Model Selected", text=dialog_text).run_async()


# f8 to select model
@kb.add("f8")
def _(event):
    # You can prevent the character from being added to the input buffer
    # event.app.current_buffer.reset()
    event.app.create_background_task(select_model())


def handle_input():
    while True:
        # avoid adding '\n' for prompt(). Otherwise, it will cause a display issue for radiolist_dialog.
        print("\nEnter your message:")
        user_content = prompt(key_bindings=kb, multiline=True)

        # print(user_content)
        # append the user's message to the messages list
        messages.append({"role": "user", "content": user_content})
        completion = client.chat.completions.create(
            model=model_in_use, messages=messages
        )

        completion_message = completion.choices[0].message
        print(f"\n\nResponse:\n{completion_message.content}\n")
        # append the assistant's response to the messages list
        messages.append(completion_message)


if __name__ == "__main__":
    print("Instructions:")
    print("- Press Enter to insert a new line")
    print("- Press Alt-Enter (or Escape followed by Enter) to send a message")
    print("- Press F8 to change model")
    print("- Press Ctrl-C or Ctrl-D to quit")
    print(f"\n{system_content}\n")

    try:
        handle_input()
    except (KeyboardInterrupt, EOFError):  # Ctrl-C or Ctrl-D is pressed
        print("\nQuitting...")
        exit(0)
